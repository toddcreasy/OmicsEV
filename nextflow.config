params {
    help              = false
    data_dir          = null
    sample_list       = null
    x2                = null
    x2_label          = "Protein"
    use_existing_data = true
    data_type         = "gene"
    class_for_ml      = null
    outdir            = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory       = '128.GB'
    max_cpus         = 16
    max_time         = '240.h'
}

// Default container used by pipeline
process.container    = 'proteomics/omicsev:latest' 

// Load base.config by default for all pipelines
process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [140,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 50.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
}

profiles {
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        docker.runOptions      = "-v $PWD:$PWD -w $PWD"
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
    }
    testAWS { includeConfig 'conf/test_aws.config' }
    testSlurm { includeConfig 'conf/test_slurm.config' }
}

manifest {
    name            = 'toddcreasy/OmicsEV'
    homePage        = 'https://github.com/toddcreasy/OmicsEV'
    description     = 'Multi-omics Enabled Sample Mislabeling Correction'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}